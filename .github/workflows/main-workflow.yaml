name: go-fortune-workflow

# trigger
on:
  push:
    branches:
      - "release/v[0-9]+.[0-9]+"

jobs:
  # name of your job
  scan-vulnerabilities:
    name: Scan Vulnerabilities
    # runner
    runs-on: ubuntu-latest
    permissions: write-all
    if: "!contains(github.event.head_commit.message, '#NORUN')"
    # steps in this job
    outputs:
      output1: ${{ steps.output-report.outputs.tr }}
      output2: ${{ steps.Scan-step.outcome }}
    steps:
      - name: Checkout
        id: Checkout-step
        uses: actions/checkout@v3
        with:
          ref: ${{github.ref}}
          path: /home/runner/work/go-fortune/go-fortune/release/v0.3
      - name: Scan Vulnerability with Trivy (fs mode)
        id: Scan-step
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          scan-ref: release/v0.3
          ignore-unfixed: false
          format: "table"
          output: "trivy.report.txt"
          severity: "HIGH"
          vuln-type: os, library
          scanners: vuln,secret,config
      - name: push output to github_output
        id: output-report
        run: |
          pwd
          ls
          cd release/v0.3
          ls
          echo "tr=$(cat trivy.report.txt)" >> $GITHUB_OUTPUT
      - name: test output
        run: echo ${{ steps.output-report.outputs.tr }}
  Start-Reporting-Vulnerabilities:
    runs-on: ubuntu-latest
    needs: scan-vulnerabilities
    if: false # ${{needs.scan-vulnerabilities-job.outputs.output1}} != ''
    steps:
      - run: echo ${{needs.scan-vulnerabilities-job.outputs.output1}}
      - name: Send Report to Slack Dipsa58 channel
        id: slack
        uses: slackapi/slack-github-action@v1.26.0
        with:
          payload: |
            {
                "text": "Push commit triggered workflow",
                "blocks": [
                    {
                        "type": "section",
                        "fields": [
                            {
                                "type": "mrkdwn",
                                "text": "*Ref*\n${{github.ref}}"
                            },
                            {
                                "type": "mrkdwn",
                                "text": "*Event*\n${{github.event_name}}"
                            }
                        ]
                    },
                    {
                        "type": "section",
                        "fields": [
                            {
                                "type": "mrkdwn",
                                "text": "*Actions URL*\nBuild and Push"
                            },
                            {
                                "type": "mrkdwn",
                                "text": "*Commit*\n${{github.sha}}"
                            }
                        ]
                    },
                    {
                        "type": "section",
                        "fields": [
                            {
                                "type": "mrkdwn",
                                "text": "*Scan failed - ${{ secrets.DOCKERUSERNAME }}*\nFailed trivy scan, see uploaded report"
                            },
                        ]
                    }
                ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.MYTUNNEL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
      - name: Upload report to Slack
        uses: MeilCli/slack-upload-file@v4
        with:
          slack_token: ${{ secrets.SLACKTOKEN }}
          channel_id: ${{ secrets.SLACKCHANNELID }}
          file_path: "trivy-report.txt"
          file_type: "text"
          initial_comment: "Post by slack-upload-file, reinstalled app"
  Build-Push-Sign-And-Notify:
    runs-on: ubuntu-latest
    needs: scan-vulnerabilities
    if: false # ${{needs.scan-vulnerabilities-job.outputs.output1}} == ''
    steps:
      - run: echo ${{needs.scan-vulnerabilities-job.outputs.output1}}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUBUSERNAME }}
          password: ${{ secrets.DOCKERHUBACCESSTOKEN }}
      - name: Build and push
        uses: docker/build-push-action@v5
        id: build-and-push
        with:
          file: /home/runner/work/go-fortune/go-fortune/release/v0.3/Dockerfile
          push: true
          tags: ${{secrets.DOCKERHUBUSERNAME}}/go-fortune:v0.3
      - name: Install Cosign
        uses: sigstore/cosign-installer@v3.5.0
      - name: Sign image with a key
        run: |
          cosign sign --yes --key env://COSIGN_PRIVATE_KEY ${images}
          cosign sign --key env://COSIGN_PRIVATE_KEY env://tag@${DIGEST}
        env:
          TAG: ${{ secrets.DOCKERHUBUSERNAME }}/go-fortune
          COSIGN_PRIVATE_KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}
          COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSWORD }}
          DIGEST: ${{ steps.build-and-push.outputs.digest }}
      - name: Send custom JSON data to Slack workflow
        id: slack
        uses: slackapi/slack-github-action@v1.26.0
        with:
          payload: |
            {
                "text": "Push commit triggered workflow",
                "blocks": [
                    {
                        "type": "section",
                        "fields": [
                            {
                                "type": "mrkdwn",
                                "text": "*Ref*\n${{github.ref}}"
                            },
                            {
                                "type": "mrkdwn",
                                "text": "*Event*\n${{github.sha}}"
                            }
                        ]
                    },
                    {
                        "type": "section",
                        "fields": [
                            {
                                "type": "mrkdwn",
                                "text": "*Actions URL*\nBuild and Push"
                            },
                            {
                                "type": "mrkdwn",
                                "text": "*Commit*\n${{github.event.head_commit.message}}"
                            }
                        ]
                    },
                    {
                        "type": "section",
                        "fields": [
                            {
                                "type": "mrkdwn",
                                "text": "*Image build and signed*"
                            }
                        ]
                    },
                    {
                        "type": "section",
                        "fields": [
                            {
                                "type": "mrkdwn",
                                "text": "*Name:* Kevin Oh"
                            }
                        ]
                    },
                    {
                        "type": "section",
                        "fields": [
                            {
                                "type": "mrkdwn",
                                "text": "*Matriculation:* A0023945E"
                            }
                        ]
                    },
                    {
                        "type": "section",
                        "fields": [
                            {
                                "type": "mrkdwn",
                                "text": "*Email:* ohsl265@gmail.com"
                            }
                        ]
                    },
                    {
                        "type": "section",
                        "fields": [
                            {
                                "type": "mrkdwn",
                                "text": "*Git:* ${{github.repository}}"
                            }
                        ]
                    },
                    {
                        "type": "section",
                        "fields": [
                            {
                                "type": "mrkdwn",
                                "text": "*Image:* https://hub.docker/repository/docker/ko812/go-fortune"
                            }
                        ]
                    }
                ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.MYTUNNEL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
